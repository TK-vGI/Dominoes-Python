dominoes_game/
├── main.py (Entry point of the game.)
├── domino.py (Represents a single domino tile.)
├── player.py (Represents a player (human or AI).)
├── game.py (Handles game logic, turns, and win conditions.)
└── utils.py (Helper functions)

# main.py
from game import Game
from player import Player

if __name__ == "__main__":
    players = [Player("Alice"), Player("Bob")]
    game = Game(players)
    game.play_game()

# domino.py
class Domino:
    def __init__(self, left, right):
        self.left = left
        self.right = right

    def flipped(self):
        return Domino(self.right, self.left)

    def __str__(self):
        return f"[{self.left}|{self.right}]"

    def matches(self, number):
        return self.left == number or self.right == number

# player.py
class Player:
    def __init__(self, name):
        self.name = name
        self.hand = []

    def draw(self, domino):
        self.hand.append(domino)

    def play(self, board_ends):
        # Basic logic to find a playable domino
        for domino in self.hand:
            if domino.matches(board_ends[0]) or domino.matches(board_ends[1]):
                self.hand.remove(domino)
                return domino
        return None  # Pass

# game.py
import random
from domino import Domino
from player import Player

class Game:
    def __init__(self, players):
        self.players = players
        self.dominoes = [Domino(i, j) for i in range(7) for j in range(i, 7)]
        random.shuffle(self.dominoes)
        self.board = []

    def deal(self):
        for _ in range(7):
            for player in self.players:
                player.draw(self.dominoes.pop())

    def play_game(self):
        self.deal()
        current = 0
        self.board.append(self.dominoes.pop())  # Start with one tile
        while True:
            player = self.players[current]
            ends = (self.board[0].left, self.board[-1].right)
            move = player.play(ends)
            if move:
                if move.right == ends[0]:
                    self.board.insert(0, move)
                elif move.left == ends[0]:
                    self.board.insert(0, move.flipped())
                elif move.left == ends[1]:
                    self.board.append(move)
                elif move.right == ends[1]:
                    self.board.append(move.flipped())
                print(f"{player.name} plays {move}")
            else:
                print(f"{player.name} passes")

            if not player.hand:
                print(f"{player.name} wins!")
                break

            current = (current + 1) % len(self.players)

# utils.py